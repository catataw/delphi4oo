unit TestDomain.Shared;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Domain.Shared;

type

  TestAndSpecification = class(TTestCase)
  strict private
    FAndSpecification: AndSpecification;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure Test.ctor;
    procedure TestisSatisfiedBy;
  end;
  // Test methods for class OrSpecification

  TestOrSpecification = class(TTestCase)
  strict private
    FOrSpecification: OrSpecification;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure Test.ctor;
    procedure TestisSatisfiedBy;
  end;
  // Test methods for class NotSpecification

  TestNotSpecification = class(TTestCase)
  strict private
    FNotSpecification: NotSpecification;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure Test.ctor;
    procedure TestisSatisfiedBy;
  end;

implementation

procedure TestEntity.SetUp;
begin
  // TODO: Initialize FEntity
end;

procedure TestEntity.TearDown;
begin
  FEntity := nil;
end;

procedure TestEntity.TestsameIdentityAs;
var
  ReturnValue: Boolean;
  other: T;
begin
  // TODO: Setup method call parameters
  ReturnValue := FEntity.sameIdentityAs(other);
  // TODO: Validate method results
end;

procedure TestValueObject.SetUp;
begin
  // TODO: Initialize FValueObject
end;

procedure TestValueObject.TearDown;
begin
  FValueObject := nil;
end;

procedure TestValueObject.TestsameValueAs;
var
  ReturnValue: Boolean;
  other: T;
begin
  // TODO: Setup method call parameters
  ReturnValue := FValueObject.sameValueAs(other);
  // TODO: Validate method results
end;

procedure TestDomainEvent.SetUp;
begin
  // TODO: Initialize FDomainEvent
end;

procedure TestDomainEvent.TearDown;
begin
  FDomainEvent := nil;
end;

procedure TestDomainEvent.TestsameEventAs;
var
  ReturnValue: Boolean;
  other: T;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDomainEvent.sameEventAs(other);
  // TODO: Validate method results
end;

procedure TestSpecification.SetUp;
begin
  // TODO: Initialize FSpecification
end;

procedure TestSpecification.TearDown;
begin
  FSpecification := nil;
end;

procedure TestSpecification.TestisSatisfiedBy;
var
  ReturnValue: Boolean;
  T: T;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSpecification.isSatisfiedBy(T);
  // TODO: Validate method results
end;

procedure TestSpecification.Test_And;
var
  ReturnValue: Specification <>;
  Specification: Specification<System.Object>;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSpecification._And(Specification);
  // TODO: Validate method results
end;

procedure TestSpecification.Test_OR;
var
  ReturnValue: Specification <>;
  Specification: Specification<System.Object>;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSpecification._OR(Specification);
  // TODO: Validate method results
end;

procedure TestSpecification.Test_Not;
var
  ReturnValue: Specification <>;
  Specification: Specification<System.Object>;
begin
  // TODO: Setup method call parameters
  ReturnValue := FSpecification._Not(Specification);
  // TODO: Validate method results
end;

procedure TestAbstractSpecification.SetUp;
begin
  FAbstractSpecification := AbstractSpecification.Create;
end;

procedure TestAbstractSpecification.TearDown;
begin
  FAbstractSpecification.Free;
  FAbstractSpecification := nil;
end;

procedure TestAbstractSpecification.TestisSatisfiedBy;
var
  ReturnValue: Boolean;
  T: T;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAbstractSpecification.isSatisfiedBy(T);
  // TODO: Validate method results
end;

procedure TestAbstractSpecification.Test_And;
var
  ReturnValue: Specification <>;
  Specification: Specification<System.Object>;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAbstractSpecification._And(Specification);
  // TODO: Validate method results
end;

procedure TestAbstractSpecification.Test_OR;
var
  ReturnValue: Specification <>;
  Specification: Specification<System.Object>;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAbstractSpecification._OR(Specification);
  // TODO: Validate method results
end;

procedure TestAbstractSpecification.Test_Not;
var
  ReturnValue: Specification <>;
  Specification: Specification<System.Object>;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAbstractSpecification._Not(Specification);
  // TODO: Validate method results
end;

procedure TestAndSpecification.SetUp;
begin
  FAndSpecification := AndSpecification.Create;
end;

procedure TestAndSpecification.TearDown;
begin
  FAndSpecification.Free;
  FAndSpecification := nil;
end;

procedure TestAndSpecification.Test.ctor;
var
  spec2: Specification<System.Object>;
  spec1: Specification<System.Object>;
begin
  // TODO: Setup method call parameters
  FAndSpecification .. ctor(spec1, spec2);
  // TODO: Validate method results
end;

procedure TestAndSpecification.TestisSatisfiedBy;
var
  ReturnValue: Boolean;
  T: T;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAndSpecification.isSatisfiedBy(T);
  // TODO: Validate method results
end;

procedure TestOrSpecification.SetUp;
begin
  FOrSpecification := OrSpecification.Create;
end;

procedure TestOrSpecification.TearDown;
begin
  FOrSpecification.Free;
  FOrSpecification := nil;
end;

procedure TestOrSpecification.Test.ctor;
var
  spec2: Specification<System.Object>;
  spec1: Specification<System.Object>;
begin
  // TODO: Setup method call parameters
  FOrSpecification .. ctor(spec1, spec2);
  // TODO: Validate method results
end;

procedure TestOrSpecification.TestisSatisfiedBy;
var
  ReturnValue: Boolean;
  T: T;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOrSpecification.isSatisfiedBy(T);
  // TODO: Validate method results
end;

procedure TestNotSpecification.SetUp;
begin
  FNotSpecification := NotSpecification.Create;
end;

procedure TestNotSpecification.TearDown;
begin
  FNotSpecification.Free;
  FNotSpecification := nil;
end;

procedure TestNotSpecification.Test.ctor;
var
  spec1: Specification<System.Object>;
begin
  // TODO: Setup method call parameters
  FNotSpecification .. ctor(spec1);
  // TODO: Validate method results
end;

procedure TestNotSpecification.TestisSatisfiedBy;
var
  ReturnValue: Boolean;
  T: T;
begin
  // TODO: Setup method call parameters
  ReturnValue := FNotSpecification.isSatisfiedBy(T);
  // TODO: Validate method results
end;

initialization

// Register any test cases with the test runner

RegisterTest(TestAndSpecification.Suite);
RegisterTest(TestOrSpecification.Suite);
RegisterTest(TestNotSpecification.Suite);

end.
